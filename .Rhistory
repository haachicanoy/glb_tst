x <- as.numeric(int)
return(mean(x))
}) %>%
unlist
tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
# How many times the same patient visited the hospital
patient_vsts <- tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
names(patient_vsts)
names(patient_vsts)[1] <- 'patient_nbr'
View(patient_vsts)
names(tbl)
patient_vsts
tbl %>%
dplyr::filter(patient_nbr == 88785891) %>%
View()
tbl %>% ggplot(aes(x = age_num)) + geom_histogram() + facet_wrap(readmitted~)
tbl %>% ggplot(aes(x = age_num)) + geom_histogram() + facet_wrap(~readmitted, ncol = 1)
tbl %>% ggplot(aes(x = number_diagnoses)) + geom_histogram() + facet_wrap(~readmitted, ncol = 1)
tbl %>% ggplot(aes(x = num_medications)) + geom_histogram() + facet_wrap(~readmitted, ncol = 1)
tbl %>% ggplot(aes(x = num_procedures)) + geom_histogram() + facet_wrap(~readmitted, ncol = 1)
tbl %>% ggplot(aes(x = num_lab_procedures)) + geom_histogram() + facet_wrap(~readmitted, ncol = 1)
tbl %>% ggplot(aes(x = time_in_hospital)) + geom_histogram() + facet_wrap(~readmitted, ncol = 1)
tbl %>% ggplot(aes(x = number_diagnoses)) + geom_histogram() + facet_wrap(~readmitted, ncol = 1)
table(tbl$race, tbl$readmitted) %>%
base::data.frame() %>%
ggplot(aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
coord_equal() +
scale_fill_gradientn(name = "", colors = terrain.colors(10)) +
scale_x_discrete(name = "") +
scale_y_discrete(name = "")
table(tbl$race, tbl$readmitted)/101766 %>%
base::data.frame() %>%
ggplot(aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
coord_equal() +
scale_fill_gradientn(name = "", colors = terrain.colors(10)) +
scale_x_discrete(name = "") +
scale_y_discrete(name = "")
table(tbl$race, tbl$readmitted)/101766
head(patient_vsts)
tbl %>%
dplyr::filter(patient_nbr == 88785891) %>%
View()
library(zoo)
as.Date(126171582)
as.Date(6171582)
as.Date(71582)
as.Date(582)
hist(tbl$time_in_hospital)
hist(tbl$num_lab_procedures)
install.packages("sparklyr")
library(sparklyr)
spark_install(version = "2.1.0")
library(sparklyr)
sc <- spark_connect(master = "local")
library(sparklyr)
sc <- spark_connect(master = "local")
library(sparklyr)
sc <- spark_connect(master = "local")
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrplot, ranger, fastcluster)
## Obtain the data
if(!file.exists(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'))){
## Download data
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/00296/dataset_diabetes.zip'
download.file(url, destfile = paste0(getwd(),'/dataset_diabetes.zip'))
## Unzip files
unzip(paste0(getwd(),'/dataset_diabetes.zip'))
file.remove(paste0(getwd(),'/dataset_diabetes.zip'))
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
} else {
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
}
## Replace '?' character by NA's
tbl <- tbl %>% dplyr::na_if(y = '?')
psych::describe(tbl)
## Data pre-processing
## Identify and remove variables without variance
zvar <- tbl %>% caret::nzv()
tbl  <- tbl[,-zvar]
## Replace the codes by the right categories to the *admision* variables
# Load ID identifiers
idi  <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/IDs_mapping.csv'), delim = ',')
mtch <- which(is.na(idi$admission_type_id))
# admision_type_id
idi1 <- idi[1:(mtch[1]-1),]
# discharge_disposition_id
idi2 <- idi[(mtch[1]+1):(mtch[2]-1),]
names(idi2) <- as.character(idi2[1,])
idi2 <- idi2[-1,]
# admission_source_id
idi3 <- idi[(mtch[2]+1):nrow(idi),]
names(idi3) <- as.character(idi3[1,])
idi3 <- idi3[-1,]
tbl$admission_type_id <- factor(tbl$admission_type_id)
levels(tbl$admission_type_id) <- idi1$description
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('NULL','Not Available')] <- NA
tbl$discharge_disposition_id <- factor(tbl$discharge_disposition_id)
levels(tbl$discharge_disposition_id) <- idi2$description[match(levels(tbl$discharge_disposition_id), idi2$discharge_disposition_id)]
levels(tbl$discharge_disposition_id)[levels(tbl$discharge_disposition_id) %in% c('NULL','Not Available')] <- NA
tbl$admission_source_id <- factor(tbl$admission_source_id)
levels(tbl$admission_source_id) <- idi3$description[match(levels(tbl$admission_source_id), idi3$admission_source_id)]
levels(tbl$admission_source_id)[levels(tbl$admission_source_id) %in% c('NULL','Not Available')] <- NA
rm(idi, idi1, idi2, idi3)
## Identify variables with more than 15% of missing data
msg <- tbl %>%
apply(X = ., MARGIN = 2, function(x){sum(is.na(x))/nrow(.)}) %>%
sort(decreasing = T) %>%
.[. > 0.15]
print(msg)
# Remove variables with more than 15% of missing data
tbl <- tbl[,-which(names(tbl) %in% names(msg))]
# Check the confusion matrix
# table(tbl$race, tbl$readmitted) %>%
#   base::data.frame() %>%
#   ggplot(aes(x = Var1, y = Var2, fill = Freq)) +
#   geom_tile() +
#   coord_equal() +
#   scale_fill_gradientn(name = "", colors = terrain.colors(10)) +
#   scale_x_discrete(name = "") +
#   scale_y_discrete(name = "")
# How many times the same patient visited the hospital
patient_vsts <- tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
names(patient_vsts)[1] <- 'patient_nbr'
tbl$nbr_visits <- NA
table(tbl$readmitted[!(tbl$patient_nbr %in% unq_pat)])
tbl %>%
dplyr::filter(patient_nbr == 88785891) %>%
View()
str(tbl)
## Transform character to factors
tbl[sapply(tbl, is.character)] <- lapply(tbl[sapply(tbl, is.character)], as.factor)
## Create numerical age variables using the midpoint of each age interval
tbl$age_num <- tbl$age %>%
gsub('\\[', '', .) %>%
gsub('\\)', '', .) %>%
strsplit(., split = '-') %>%
purrr::map(.f = function(int){
x <- as.numeric(int)
return(mean(x))
}) %>%
unlist
tbl$encounter_id <- NULL
tbl$patient_nbr  <- NULL
tbl_spk <- sparklyr::copy_to(sc, tbl)
partitions <- tbl_spk %>%
sparklyr::sdf_partition(training = 0.7, test = 0.3, seed = 1099)
names(tbl)
tbl
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
suppressMessages(pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrplot, ranger, fastcluster, sparklyr))
## Obtain the data
if(!file.exists(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'))){
## Download data
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/00296/dataset_diabetes.zip'
download.file(url, destfile = paste0(getwd(),'/dataset_diabetes.zip'))
## Unzip files
unzip(paste0(getwd(),'/dataset_diabetes.zip'))
file.remove(paste0(getwd(),'/dataset_diabetes.zip'))
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
} else {
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
}
## Replace '?' character by NA's
tbl <- tbl %>% dplyr::na_if(y = '?')
zvar <- tbl %>% caret::nzv()
tbl  <- tbl[,-zvar]
idi  <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/IDs_mapping.csv'), delim = ',')
mtch <- which(is.na(idi$admission_type_id))
# admision_type_id
idi1 <- idi[1:(mtch[1]-1),]
# discharge_disposition_id
idi2 <- idi[(mtch[1]+1):(mtch[2]-1),]
names(idi2) <- as.character(idi2[1,])
idi2 <- idi2[-1,]
# admission_source_id
idi3 <- idi[(mtch[2]+1):nrow(idi),]
names(idi3) <- as.character(idi3[1,])
idi3 <- idi3[-1,]
tbl$admission_type_id <- factor(tbl$admission_type_id)
levels(tbl$admission_type_id) <- idi1$description
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('NULL','Not Available')] <- NA
tbl$discharge_disposition_id <- factor(tbl$discharge_disposition_id)
levels(tbl$discharge_disposition_id) <- idi2$description[match(levels(tbl$discharge_disposition_id), idi2$discharge_disposition_id)]
levels(tbl$discharge_disposition_id)[levels(tbl$discharge_disposition_id) %in% c('NULL','Not Available')] <- NA
tbl$admission_source_id <- factor(tbl$admission_source_id)
levels(tbl$admission_source_id) <- idi3$description[match(levels(tbl$admission_source_id), idi3$admission_source_id)]
levels(tbl$admission_source_id)[levels(tbl$admission_source_id) %in% c('NULL','Not Available')] <- NA
rm(idi, idi1, idi2, idi3)
## Identify variables with more than 15% of missing data
msg <- tbl %>%
apply(X = ., MARGIN = 2, function(x){sum(is.na(x))/nrow(.)}) %>%
sort(decreasing = T) %>%
.[. > 0.15]
print(msg)
# Remove variables with more than 15% of missing data
tbl <- tbl[,-which(names(tbl) %in% names(msg))]
# How many times the same patient visited the hospital
visits <- tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
names(visits)[1] <- 'patient_nbr'
head(visits)
visits %>% dplyr::filter(Freq == 2)
tbl %>% dplyr::filter(patient_nbr == 1270602) %>% View()
tbl %>% dplyr::filter(patient_nbr == 1270602) %>% View()
visits %>% dplyr::filter(Freq == 2)
tbl %>% dplyr::filter(patient_nbr == 1276191) %>% View()
tbl %>% dplyr::filter(patient_nbr == 1276191) %>% View()
visits %>% dplyr::filter(Freq == 2)
visits %>% head()
tbl %>% dplyr::filter(patient_nbr == 88785891) %>% View()
visits <- visits %>% dplyr::filter(Freq > 1)
visits$patient_nbr %>%
unique
visits$patient_nbr %>%
unique %>%
as.character %>% length
to_search <- visits$patient_nbr %>%
as.numeric
to_search
to_search <- visits$patient_nbr %>%
as.character %>%
as.numeric
g <- gc()
rm(list = ls ())
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
suppressMessages(pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrplot, ranger, fastcluster, sparklyr))
## Obtain the data
if(!file.exists(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'))){
## Download data
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/00296/dataset_diabetes.zip'
download.file(url, destfile = paste0(getwd(),'/dataset_diabetes.zip'))
## Unzip files
unzip(paste0(getwd(),'/dataset_diabetes.zip'))
file.remove(paste0(getwd(),'/dataset_diabetes.zip'))
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
} else {
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
}
## Replace '?' character by NA's
tbl <- tbl %>% dplyr::na_if(y = '?')
## Identify and remove variables without variance
zvar <- tbl %>% caret::nzv()
tbl  <- tbl[,-zvar]
idi  <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/IDs_mapping.csv'), delim = ',')
mtch <- which(is.na(idi$admission_type_id))
# admision_type_id
idi1 <- idi[1:(mtch[1]-1),]
# discharge_disposition_id
idi2 <- idi[(mtch[1]+1):(mtch[2]-1),]
names(idi2) <- as.character(idi2[1,])
idi2 <- idi2[-1,]
# admission_source_id
idi3 <- idi[(mtch[2]+1):nrow(idi),]
names(idi3) <- as.character(idi3[1,])
idi3 <- idi3[-1,]
tbl$admission_type_id <- factor(tbl$admission_type_id)
levels(tbl$admission_type_id) <- idi1$description
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('NULL','Not Available')] <- NA
tbl$discharge_disposition_id <- factor(tbl$discharge_disposition_id)
levels(tbl$discharge_disposition_id) <- idi2$description[match(levels(tbl$discharge_disposition_id), idi2$discharge_disposition_id)]
levels(tbl$discharge_disposition_id)[levels(tbl$discharge_disposition_id) %in% c('NULL','Not Available')] <- NA
tbl$admission_source_id <- factor(tbl$admission_source_id)
levels(tbl$admission_source_id) <- idi3$description[match(levels(tbl$admission_source_id), idi3$admission_source_id)]
levels(tbl$admission_source_id)[levels(tbl$admission_source_id) %in% c('NULL','Not Available')] <- NA
rm(idi, idi1, idi2, idi3)
## Identify variables with more than 15% of missing data
msg <- tbl %>%
apply(X = ., MARGIN = 2, function(x){sum(is.na(x))/nrow(.)}) %>%
sort(decreasing = T) %>%
.[. > 0.15]
print(msg)
# Remove variables with more than 15% of missing data
tbl <- tbl[,-which(names(tbl) %in% names(msg))]
visits <- tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
names(visits)[1] <- 'patient_nbr'
visits <- visits %>% dplyr::filter(Freq > 1)
# How many times the same patient visited the hospital
# Select the ones with the maximum number of days interned in the hospital
visits <- tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
names(visits)[1] <- 'patient_nbr'
unq_vs <- visits %>% dplyr::filter(Freq == 1)
visits <- visits %>% dplyr::filter(Freq > 1)
visits
tbl_dup <- tbl %>% dplyr::filter(!(patient_nbr %in% unq_vs$patient_nbr))
tbl_unq <- tbl %>% dplyr::filter(patient_nbr %in% unq_vs$patient_nbr)
to_search <- visits$patient_nbr %>%
as.character %>%
as.numeric
to_search
to_search <- visits$patient_nbr %>%
as.character %>%
as.numeric
nbr = to_search[1]
ndr
nbr
tbl_dup %>% dplyr::filter(patient_nbr == nbr)
names(tbl)
tbl_dup %>% dplyr::filter(patient_nbr == nbr & which.max(time_in_hospital))
tbl_dup %>%
dplyr::filter(patient_nbr == nbr) %>%
.[which(.$time_in_hospital),]
tbl_dup %>%
dplyr::filter(patient_nbr == nbr) %>%
.[which.max(.$time_in_hospital),]
visits$patient_nbr %>%
as.character %>%
as.numeric %>%
purrr::map(.f = function(nbr){
df <- tbl_dup %>%
dplyr::filter(patient_nbr == nbr) %>%
.[which.max(.$time_in_hospital)[1],]
return(df)
})
dup_lst <- visits$patient_nbr %>%
as.character %>%
as.numeric %>%
purrr::map(.f = function(nbr){
df <- tbl_dup %>%
dplyr::filter(patient_nbr == nbr) %>%
.[which.max(.$time_in_hospital)[1],]
return(df)
})
tbl_dup2 <- visits$patient_nbr %>%
as.character %>%
as.numeric %>%
purrr::map(.f = function(nbr){
df <- tbl_dup %>%
dplyr::filter(patient_nbr == nbr) %>%
.[which.max(.$time_in_hospital)[1],]
return(df)
}) %>%
dplyr::bind_rows()
tbl$patient_nbr %>% head()
visits$patient_nbr %>% head()
# How many times the same patient visited the hospital
# Select the ones with the maximum number of days interned in the hospital
visits <- tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
names(visits)[1] <- 'patient_nbr'
visits$patient_nbr <- visits$patient_nbr %>% as.character()
head(visits)
visits <- tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
names(visits)[1] <- 'patient_nbr'
visits$patient_nbr <- visits$patient_nbr %>% as.character() %>% as.numeric()
unq_vs <- visits %>% dplyr::filter(Freq == 1)
visits <- visits %>% dplyr::filter(Freq > 1)
View(visits)
rm(tbl_dup)
tbl_unq <- tbl %>% dplyr::filter(patient_nbr %in% unq_vs$patient_nbr)
tbl_unq$number_visits <- 1
tbl_dup <- 1:nrow(visits) %>%
purrr::map(.f = function(i){
df <- tbl %>%
dplyr::filter(patient_nbr == visits$patient_nbr[i]) %>%
.[which.max(.$time_in_hospital)[1],]
df$number_visits <- visits$Freq[i]
return(df)
}) %>%
dplyr::bind_rows()
rm(tbl_dup2)
View(tbl_dup)
tbl <- rbind(tbl_dup, tbl_unq)
rm(tbl_dup, tbl_unq, unq_vs, visits)
tbl$diag_1 %>% gtools::mixedsort()
tbl$diag_1 %>% unique() %>% gtools::mixedsort()
tbl$diag_1c <- NA
tbl$diag_1c[grep(pattern = '250', x = tbl$diag_1)] <- 'Diabetes'
grep(pattern = '250', x = tbl$diag_1)
grep(pattern = '39', x = tbl$diag_1)
grep(pattern = '390', x = tbl$diag_1)
grep(pattern = '400', x = tbl$diag_1)
grep(pattern = '40', x = tbl$diag_1)
grep(pattern = '4', x = tbl$diag_1)
tbl$diag_1 %>% unique()
tbl$diag_1 %>% unique() %>% sort()
tbl$diag_1 %>% unique() %>% sort()
tbl$diag_1c <- NULL
tbl$age_num <- tbl$age %>%
gsub('\\[', '', .) %>%
gsub('\\)', '', .) %>%
strsplit(., split = '-') %>%
purrr::map(.f = function(int){
x <- as.numeric(int)
return(mean(x))
}) %>%
unlist
summary(tbl)
tbl$encounter_id <- NULL
tbl$patient_nbr  <- NULL
summary(tbl)
View(tbl)
boxplot(number_visits ~ readmitted, data = tbl)
names(tbl)
# Response variable
tbl$readmitted %in% c('<30','>30')
## Identify variables with more than 15% of missing data
msg <- tbl %>%
apply(X = ., MARGIN = 2, function(x){sum(is.na(x))/nrow(.)}) %>%
sort(decreasing = T) %>%
.[. > 0.15]
print(msg)
## Identify variables with more than 15% of missing data
msg <- tbl %>%
apply(X = ., MARGIN = 2, function(x){sum(is.na(x))/nrow(.)}) %>%
sort(decreasing = T)
print(msg)
names(tbl)
tbl$race %>% table()
tbl$gender %>% table()
tbl$gender %>% table() %>% sum()
tbl$gender[grep(pattern = 'Unknown')]
tbl$gender[grep(pattern = 'Unknown', x = tbl$gender)]
tbl$gender[grep(pattern = 'Unknown', x = tbl$gender)] <- NA
tbl$age %>% table()
tbl$admission_type_id %>% table()
tbl$admission_type_id[tbl$admission_type_id %in% c('Newborn','Trauma Center','Not Mapped')]
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('Newborn','Trauma Center','Not Mapped')]
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('Newborn','Trauma Center','Not Mapped')] <- 'Other'
tbl$admission_type_id %>% table()
tbl$discharge_disposition_id %>% table()
tbl$discharge_disposition_id %>% table() %>% sort(decreasing = T)
tbl$discharge_disposition_id %>% table() %>% sort(decreasing = T) %>% View()
tbl$admission_source_id %>% table() %>% sort(decreasing = T)
tbl$A1Cresult %>% table()
tbl$metformin %>% table()
tbl$glipizide %>% table()
tbl$glyburide %>% table()
tbl$pioglitazone %>% table()
tbl$rosiglitazone %>% table()
tbl$insulin %>% table()
tbl$change %>% table()
table(tbl$change, tbl$readmitted)
tbl$diabetesMed %>% table()
table(tbl$diabetesMed, tbl$readmitted)
tbl$number_visits %>% table()
tbl$diag_1 %>% unique %>% length()
tbl$diag_2 %>% unique %>% length()
tbl$diag_3 %>% unique %>% length()
tbl$admission_type_id %>% table()
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
suppressMessages(pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrplot, ranger, fastcluster, sparklyr))
## Obtain the data
if(!file.exists(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'))){
## Download data
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/00296/dataset_diabetes.zip'
download.file(url, destfile = paste0(getwd(),'/dataset_diabetes.zip'))
## Unzip files
unzip(paste0(getwd(),'/dataset_diabetes.zip'))
file.remove(paste0(getwd(),'/dataset_diabetes.zip'))
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
} else {
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
}
## Replace '?' character by NA's
tbl <- tbl %>% dplyr::na_if(y = '?')
zvar <- tbl %>% caret::nzv()
tbl  <- tbl[,-zvar]
idi  <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/IDs_mapping.csv'), delim = ',')
mtch <- which(is.na(idi$admission_type_id))
# admision_type_id
idi1 <- idi[1:(mtch[1]-1),]
# discharge_disposition_id
idi2 <- idi[(mtch[1]+1):(mtch[2]-1),]
names(idi2) <- as.character(idi2[1,])
idi2 <- idi2[-1,]
# admission_source_id
idi3 <- idi[(mtch[2]+1):nrow(idi),]
names(idi3) <- as.character(idi3[1,])
idi3 <- idi3[-1,]
tbl$admission_type_id <- factor(tbl$admission_type_id)
levels(tbl$admission_type_id) <- idi1$description
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('NULL','Not Available')] <- NA
tbl$discharge_disposition_id <- factor(tbl$discharge_disposition_id)
levels(tbl$discharge_disposition_id) <- idi2$description[match(levels(tbl$discharge_disposition_id), idi2$discharge_disposition_id)]
levels(tbl$discharge_disposition_id)[levels(tbl$discharge_disposition_id) %in% c('NULL','Not Available')] <- NA
tbl$admission_source_id <- factor(tbl$admission_source_id)
levels(tbl$admission_source_id) <- idi3$description[match(levels(tbl$admission_source_id), idi3$admission_source_id)]
levels(tbl$admission_source_id)[levels(tbl$admission_source_id) %in% c('NULL','Not Available')] <- NA
rm(idi, idi1, idi2, idi3)
tbl$admission_type_id %>% levels()
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('Newborn','Trauma Center','Not Mapped')] <- 'Other'
tbl$admission_type_id %>% levels()
tbl$discharge_disposition_id %>% levels()
View(tbl)
tbl$readmitted[grep('expired',tbl$discharge_disposition_id])] %>% table()
tbl$readmitted[grep('expired',tbl$discharge_disposition_id)] %>% table()
grep('Expired',tbl$discharge_disposition_id)
tbl$readmitted[grep('[E][e]xpired',tbl$discharge_disposition_id)] %>% table()
tbl$readmitted[grep('[E][e]xpired',tbl$discharge_disposition_id, fixed = F)] %>% table()
tbl$readmitted[grep('Expired',tbl$discharge_disposition_id)] %>% table()
tbl$discharge_disposition_id %>% levels()
tbl$readmitted %>% table()
sum(c(11357, 35545))
tbl$discharge_disposition_id %>% table %>% View()
levels(tbl$discharge_disposition_id)
grep(pattern = 'discharged', x = levels(tbl$discharge_disposition_id))
