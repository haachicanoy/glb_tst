geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0,xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 1) +
geom_text(data = cc, aes(x = PC1 * 1.15, y = PC2 * 1.15, label = rownames(cc), check_overlap = T, size = 3)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 1) +
geom_text(data = cc, aes(x = PC1 * 1.15, y = PC2 * 1.15, label = rownames(cc), check_overlap = F, size = 2)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
?unit
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.7) +
geom_text(data = cc, aes(x = PC1 * 1.15, y = PC2 * 1.15, label = rownames(cc), check_overlap = F, size = 2)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text(data = cc, aes(x = PC1 * 1.15, y = PC2 * 1.15, label = rownames(cc), check_overlap = F, size = 2)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text(data = cc, aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc), check_overlap = F, size = 2)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text(data = cc, aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc), check_overlap = F, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
?geom_text
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc, aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc), check_overlap = F, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
suppressMessages(pacman::p_load(tidyverse, vroom, psych,
caret, caretEnsemble, corrplot,
ranger, fastcluster, sparklyr,
fastDummies, ape, Boruta,
future, future.apply, furrr,
lsr, RColorBrewer, DT, skimr,
naniar, ggrepel))
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc, aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc), check_overlap = F, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc, aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc), check_overlap = T, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
?geom_text_repel
cc
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc %>%
dplyr::filter((PC1 > 0.5 | PC1 < -0.5) | (PC2 > 0.5 | PC2 < -0.5)), aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc), check_overlap = T, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc %>%
dplyr::filter(PC1 > 0.5 | PC1 < -0.5), aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc), check_overlap = T, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
cc[cc$PC1 > 0.5,]
cc[cc$PC1 < 0.5,]
cc[cc$PC1 < -0.5,]
cc[(cc$PC1 < -0.5)|(cc$PC1 > 0.5),]
cc[(cc$PC1 < -0.5)|(cc$PC1 > 0.5)|(cc$PC2 < -0.5)|(cc$PC2 > 0.5),]
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc[(cc$PC1 < -0.5)|(cc$PC1 > 0.5)|(cc$PC2 < -0.5)|(cc$PC2 > 0.5),], aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc), check_overlap = T, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
cc[(cc$PC1 < -0.5)|(cc$PC1 > 0.5)|(cc$PC2 < -0.5)|(cc$PC2 > 0.5),]
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc[(cc$PC1 < -0.5)|(cc$PC1 > 0.5)|(cc$PC2 < -0.5)|(cc$PC2 > 0.5),], aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc[(cc$PC1 < -0.5)|(cc$PC1 > 0.5)|(cc$PC2 < -0.5)|(cc$PC2 > 0.5),]), check_overlap = T, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc[(cc$PC1 < -0.1)|
(cc$PC1 > 0.1)|
(cc$PC2 < -0.1)|
(cc$PC2 > 0.1),], aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc[(cc$PC1 < -0.1)|(cc$PC1 > 0.1)|(cc$PC2 < -0.1)|(cc$PC2 > 0.1),]), check_overlap = T, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
?labs
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc[(cc$PC1 < -0.1)|
(cc$PC1 > 0.1)|
(cc$PC2 < -0.1)|
(cc$PC2 > 0.1),], aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc[(cc$PC1 < -0.1)|(cc$PC1 > 0.1)|(cc$PC2 < -0.1)|(cc$PC2 > 0.1),]), check_overlap = T, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
labs(size = NULL) +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"))
vars.p
vars.p <- ggplot() +
geom_path(data = circ, aes(x, y), lty = 2, color = "grey", alpha = 0.7) +
geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
geom_segment(data = cc, aes(x = 0, xend = PC1, y = 0, yend = PC2), arrow = arrow(length = unit(0.025, "npc"), type = "open"), lwd = 0.5) +
geom_text_repel(data = cc[(cc$PC1 < -0.1)|
(cc$PC1 > 0.1)|
(cc$PC2 < -0.1)|
(cc$PC2 > 0.1),], aes(x = PC1 * 1.1, y = PC2 * 1.1, label = rownames(cc[(cc$PC1 < -0.1)|(cc$PC1 > 0.1)|(cc$PC2 < -0.1)|(cc$PC2 > 0.1),]), check_overlap = T, size = 1)) +
xlab("PC 1") +
ylab("PC 2") +
coord_equal() +
labs(size = NULL) +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = "transparent"),
legend.position = "none")
vars.p
fnl_fst
out_dir <- paste0(getwd(),'/results')
if(!dir.exists(out_dir)){dir.create(out_dir, recursive = T)}
if(!file.exists(paste0(out_dir,'/feature_selection_simulation.csv'))){
# Generate a local cluster of processors
future::plan(multiprocess, workers = future::availableCores()-1)
# Define a seed to do the results replicable
set.seed(1)
# Generate 20 random seeds from a uniform distribution
seeds <- round(runif(20) * 1000, 0)
# Run Boruta algorithm of feature selection using 20
# random subsets of 2000 patients information and
# save final decision: features CONFIRMED, TENTATIVE,
# and REJECTED
selected_fts <- seeds %>%
furrr::future_map(.f = function(seed){
# Fix each seed
set.seed(seed)
# Obtain a random sample without replacement of 2000 observations
smp <- sample(x = 1:nrow(tbl_num_full), size = 2000, replace = F)
# Run Boruta algorithm of feature selection over this random sample
fts <- Boruta::Boruta(formula = readmitted ~ ., data = tbl_num_full[smp,])
# Get the final decision
res <- fts$finalDecision
return(res)
})
fts <- selected_fts %>% as.data.frame()
fts$Feature <- rownames(fts)
rownames(fts) <- 1:nrow(fts)
colnames(fts)[1:20] <- paste0('Run_',1:20)
write.csv(fts, paste0(out_dir,'/feature_selection_simulation.csv'), row.names = F)
} else {
fts <- read.csv(paste0(out_dir,'/feature_selection_simulation.csv'))
}
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
ggplot2::ggplot(aes(x = Feature, y = Count, fill = value)) +
ggplot2::scale_fill_brewer(palette = 'Set1', direction = -1) +
ggplot2::geom_bar(stat = 'identity') +
ggplot2::coord_flip() +
ggplot2::labs(fill = 'Decision')
fnl_fst <- fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(Decision = value[which.max(Count)]) %>%
dplyr::filter(Decision %in% c('Confirmed','Tentative')) %>%
dplyr::pull(Feature)
fnl_fst[1] <- gsub('\`','',fnl_fst[1])
cat('Selected features from Boruta algorithm\n')
print(fnl_fst)
tbl_num_full_sel <- tbl_num_full[,c(fnl_fst,'readmitted')]
tbl_num_full_sel_spk <- sparklyr::copy_to(sc, tbl_num_full_sel, overwrite = T)
## Spark connection
if(!exists('sc')){
sc <- sparklyr::spark_connect(master = 'local')
}
tbl_num_full_sel_spk <- sparklyr::copy_to(sc, tbl_num_full_sel, overwrite = T)
# Define partitions of the dataset: 70% for training, 30% for testing
partitions <- tbl_spk %>%
sparklyr::sdf_partition(training = 0.7, test = 0.3, seed = 1099)
# Fit a logistic regression model
fit_log <- partitions$training %>% ml_logistic_regression(readmitted ~ .)
prd_log <- ml_predict(fit_log, partitions$test)
ml_binary_classification_eval(x = prd_log, label_col = 'readmitted', prediction_col = "prediction")
# Fit a decision tree model
fit_dct <- partitions$training %>% ml_decision_tree(readmitted ~ .)
prd_dct <- ml_predict(fit_dct, partitions$test)
ml_binary_classification_eval(x = prd_dct, label_col = 'readmitted', prediction_col = "prediction")
colnames(prd_dct)
View(prd_dct)
prd_dct$prediction
prd_log$probability_1
prd_log$probability_0
names(prd_log)
prd_log
prd_dct
ml_binary_classification_eval(x = prd_dct, label_col = 'readmitted', prediction_col = "prediction")
ml_binary_classification_eval(x = prd_dct, label_col = 'readmitted', prediction_col = "prediction")
?ml_binary_classification_eval
ml_binary_classification_eval(x = prd_dct, label_col = 'readmitted', prediction_col = "prediction", raw_prediction_col = "prediction")
# Fit a random forest model
fit_rdf <- partitions$training %>% ml_random_forest(readmitted ~ .)
prd_rdf <- ml_predict(fit_rdf, partitions$test)
ml_binary_classification_eval(x = prd_rdf, label_col = 'readmitted', prediction_col = "prediction")
# Fit a gradient boosting trees model
fit_gbt <- partitions$training %>% ml_gradient_boosted_trees(readmitted ~ .)
prd_gbt <- ml_predict(fit_gbt, partitions$test)
ml_binary_classification_eval(x = prd_gbt, label_col = 'readmitted', prediction_col = "prediction")
ml_binary_classification_evaluator(x = prd_log, label_col = 'readmitted', raw_prediction_col = 'prediction')
ml_binary_classification_evaluator(x = prd_dct, label_col = 'readmitted', raw_prediction_col = 'prediction')
ml_binary_classification_evaluator(x = prd_rdf, label_col = 'readmitted', raw_prediction_col = 'prediction')
ml_binary_classification_evaluator(x = prd_gbt, label_col = 'readmitted', raw_prediction_col = 'prediction')
# Fit a naive Bayes model
fit_nvb <- partitions$training %>% ml_naive_bayes(readmitted ~ .)
prd_nvb <- ml_predict(fit_nvb, partitions$test)
ml_binary_classification_evaluator(x = prd_nvb, label_col = 'readmitted', raw_prediction_col = 'prediction')
# Define partitions of the dataset: 70% for training, 30% for testing
partitions <- tbl_num_full_sel_spk %>%
sparklyr::sdf_partition(training = 0.7, test = 0.3, seed = 1099)
fit_log <- partitions$training %>% ml_logistic_regression(readmitted ~ .)
prd_log <- ml_predict(fit_log, partitions$test)
ml_binary_classification_evaluator(x = prd_log, label_col = 'readmitted', raw_prediction_col = 'prediction')
# Fit a decision tree model
fit_dct <- partitions$training %>% ml_decision_tree(readmitted ~ .)
prd_dct <- ml_predict(fit_dct, partitions$test)
ml_binary_classification_evaluator(x = prd_dct, label_col = 'readmitted', raw_prediction_col = 'prediction')
# Fit a random forest model
fit_rdf <- partitions$training %>% ml_random_forest(readmitted ~ .)
prd_rdf <- ml_predict(fit_rdf, partitions$test)
ml_binary_classification_evaluator(x = prd_rdf, label_col = 'readmitted', raw_prediction_col = 'prediction')
# Fit a gradient boosting trees model
fit_gbt <- partitions$training %>% ml_gradient_boosted_trees(readmitted ~ .)
prd_gbt <- ml_predict(fit_gbt, partitions$test)
ml_binary_classification_evaluator(x = prd_gbt, label_col = 'readmitted', raw_prediction_col = 'prediction')
# Fit a naive Bayes model
fit_nvb <- partitions$training %>% ml_naive_bayes(readmitted ~ .)
prd_nvb <- ml_predict(fit_nvb, partitions$test)
ml_binary_classification_evaluator(x = prd_nvb, label_col = 'readmitted', raw_prediction_col = 'prediction')
names(tbl_num_full_sel)
kmeans_model <- tbl_num_full_sel_spk %>%
ml_kmeans(k = 2,
features = c("admission_source_id_Emergency Room","admission_source_id_Referral",
"admission_type_id_Elective","admission_type_id_Emergency",
"age_num","num_lab_procedures","num_medications","number_diagnoses",
"number_emergency","number_inpatient","number_outpatient",
"number_visits","time_in_hospital"))
ml_kmeans
?ml_kmeans
kmeans_model <- tbl_num_full_sel_spk %>%
ml_kmeans(k = 2,
prediction_col = 'readmitted')
kmeans_model <- tbl_num_full_sel_spk %>%
ml_kmeans(k = 2,
readmitted ~ .)
predicted <- ml_predict(kmeans_model, tbl_num_full_sel_spk) %>% collect
table(predicted$readmitted, predicted$prediction)
log_sum <- ml_evaluate(fit_log, partitions$test)
log_sum
log_roc <- validation_summary$roc() %>% collect()
log_roc <- log_sum$roc() %>% collect()
log_sum
summary(fit_log)
spark_disconnect(sc)
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
suppressMessages(pacman::p_load(tidyverse, vroom, psych,
caret, caretEnsemble, corrplot,
ranger, fastcluster, sparklyr,
fastDummies, ape, Boruta,
future, future.apply, furrr,
lsr, RColorBrewer, DT, skimr,
naniar, ggrepel, DALEX,
breakDown, pdp))
tbl_num_full <- vroom::vroom('./processed_data/diabetic_data_processed_2_complete.csv', delim = ',')
out_dir <- paste0(getwd(),'/results')
if(!dir.exists(out_dir)){dir.create(out_dir, recursive = T)}
if(!file.exists(paste0(out_dir,'/feature_selection_simulation.csv'))){
# Generate a local cluster of processors
future::plan(multiprocess, workers = future::availableCores()-1)
# Define a seed to do the results replicable
set.seed(1)
# Generate 20 random seeds from a uniform distribution
seeds <- round(runif(20) * 1000, 0)
# Run Boruta algorithm of feature selection using 20
# random subsets of 2000 patients information and
# save final decision: features CONFIRMED, TENTATIVE,
# and REJECTED
selected_fts <- seeds %>%
furrr::future_map(.f = function(seed){
# Fix each seed
set.seed(seed)
# Obtain a random sample without replacement of 2000 observations
smp <- sample(x = 1:nrow(tbl_num_full), size = 2000, replace = F)
# Run Boruta algorithm of feature selection over this random sample
fts <- Boruta::Boruta(formula = readmitted ~ ., data = tbl_num_full[smp,])
# Get the final decision
res <- fts$finalDecision
return(res)
})
fts <- selected_fts %>% as.data.frame()
fts$Feature <- rownames(fts)
rownames(fts) <- 1:nrow(fts)
colnames(fts)[1:20] <- paste0('Run_',1:20)
write.csv(fts, paste0(out_dir,'/feature_selection_simulation.csv'), row.names = F)
} else {
fts <- read.csv(paste0(out_dir,'/feature_selection_simulation.csv'))
}
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
ggplot2::ggplot(aes(x = Feature, y = Count, fill = factor(value, levels = c('Confirmed','Tentative','Rejected')))) +
ggplot2::scale_fill_brewer(palette = 'Set1', direction = -1) +
ggplot2::geom_bar(stat = 'identity') +
ggplot2::coord_flip() +
ggplot2::labs(fill = 'Decision')
fnl_fst <- fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(Decision = value[which.max(Count)]) %>%
dplyr::filter(Decision %in% c('Confirmed','Tentative')) %>%
dplyr::pull(Feature)
fnl_fst[1] <- gsub('\`','',fnl_fst[1])
cat('Selected features from Boruta algorithm\n')
print(fnl_fst)
tbl_num_full_sel <- tbl_num_full[,c(fnl_fst,'readmitted')]
if(!exists('sc')){
sc <- sparklyr::spark_connect(master = 'local', version = '3.0.1')
}
tbl_num_full_sel_spk <- sparklyr::copy_to(sc, tbl_num_full_sel, overwrite = T)
# Define partitions of the dataset: 70% for training, 30% for testing
partitions <- tbl_num_full_sel_spk %>%
sparklyr::sdf_partition(training = 0.7, test = 0.3, seed = 1099)
# Fit a gradient boosting trees model
fit_gbt <- partitions$training %>% ml_gradient_boosted_trees(readmitted ~ ., type = 'classification')
metrics <- read.csv('./results/model_accuracies.csv')
metrics %>%
tidyr::pivot_longer(cols = 2:3, names_to = 'Partition', values_to = 'Accuracy') %>%
ggplot2::ggplot(aes(x = reorder(Model, Accuracy), y = Accuracy, fill = Partition)) +
ggplot2::geom_bar(stat = "identity", position = position_dodge()) +
ggplot2::scale_fill_brewer(palette = "Paired") +
ggplot2::coord_flip() +
ggplot2::theme_bw() +
ggplot2::xlab('')
# Interpretation of the results
test_set <- partitions$test %>% dplyr::collect()
custom_predict <- function(model, new_data){
new_data_spark <- copy_to(sc, new_data, name="spark_temp1b3c4e6", overwrite = T)
spark_tbl_scored <- ml_predict(model, new_data_spark)
res <- as.numeric(as.data.frame(spark_tbl_scored %>% select(prediction) %>% collect())$prediction)
# dplyr::db_drop_table(con = sc, table = "spark_temp1b3c4e6")
return(res)
}
# Explain
xpl_spark_gbt <- DALEX::explain(model            = fit_gbt,
data             = test_set %>% select(-readmitted),
y                = test_set$readmitted,
predict_function = custom_predict,
label            = 'Gradient Boosting Trees model',
type             = 'classification')
# Variable importance
vim_spark_gbt <- DALEX::variable_importance(xpl_spark_gbt)
# Predictor-response relationship
pdp_gbt  <- DALEX::variable_effect_partial_dependency(xpl_spark_gbt,
variables = c("number_visits",
"number_inpatient",
"number_diagnoses",
"time_in_hospital",
"number_emergency",
"age_num"))
# Prediction understanding
row_00001 <- test_set[1,]
pd_spark_gbt1 <- breakDown::break_down(xpl_spark_gbt, new_observation = row_00001)
plot(pd_spark_gbt1)
!(file.exists('./results/prediction_decomposition_obs1.png') & file.exists('./results/prediction_decomposition_obs2.png'))
suppressMessages(pacman::p_load(tidyverse, vroom, psych,
caret, caretEnsemble, corrplot,
ranger, fastcluster, sparklyr,
fastDummies, ape, Boruta,
future, future.apply, furrr,
lsr, RColorBrewer, DT, skimr,
naniar, ggrepel, DALEX,
breakDown, pdp, png))
??include_graphics
library(knitr)
?include_graphics
