race_AfricanAmerican:race_Other,
gender_Female,gender_Male,
admission_type_id_Emergency:admission_type_id_Other,
discharge_disposition_id_Admitted:`discharge_disposition_id_Not Mapped`,
admission_source_id_Referral:admission_source_id_Other,
`A1Cresult_>7`:diabetesMed_Yes, readmitted)
tbl_num_full <- tbl_num %>%
tidyr::drop_na()
tbl_num_full_sp <- tbl_num_full[,-ncol(tbl_num_full)]
names(tbl_num_full_sp)
levels(tbl_num_full$readmitted)
tbl_num_less_30 <- tbl_num_full[tbl_num_full$readmitted == '<30',]
tbl_num_more_30 <- tbl_num_full[tbl_num_full$readmitted == '>30',]
tbl_num_less_30 <- tbl_num_full[tbl_num_full$readmitted == '<30',]
tbl_num_less_30$readmitted <- NULL
tbl_num_more_30 <- tbl_num_full[tbl_num_full$readmitted == '>30',]
tbl_num_more_30$readmitted <- NULL
tbl_num_no_rdms <- tbl_num_full[tbl_num_full$readmitted == 'NO',]
tbl_num_no_rdms$readmitted <- NULL
tbl_less_30_spk <- sparklyr::copy_to(sc, tbl_num_less_30, overwrite = T)
tbl_more_30_spk <- sparklyr::copy_to(sc, tbl_num_more_30, overwrite = T)
tbl_no_rdms_spk <- sparklyr::copy_to(sc, tbl_num_no_rdms, overwrite = T)
pca_less_30 <- sparklyr::ml_pca(tbl_less_30_spk)
print(pca_less_30)
summary(pca_less_30)
summary(pca_less_30)
pca_less_30$explained_variance %>% head()
pca_less_30$explained_variance %>% head(4)
pca_more_30 <- sparklyr::ml_pca(tbl_more_30_spk)
pca_more_30$explained_variance %>% head(4)
pca_no_rdms <- sparklyr::ml_pca(tbl_no_rdms_spk)
pca_no_rdms$explained_variance %>% head(4)
pca_less_30$pc %>% base::as.data.frame
pca_less_30$pc %>% base::as.data.frame
pca_less_30$pc %>% :as.data.frame
pca_less_30$pc %>% as.data.frame
r_less_30 <- pca_less_30$pc %>% as.data.frame
r_less_30 <- pca_less_30$pc %>% as.data.frame %>% .[,1:5]
View(r_less_30)
r_less_30$readmitted <- '<30'
r_more_30 <- pca_more_30$pc %>% as.data.frame %>% .[,1:5]
r_more_30$variable <- rownames(r_more_30)
r_more_30$readmitted <- '>30'
r_no_rdms <- pca_no_rdms$pc %>% as.data.frame %>% .[,1:5]
r_no_rdms$variable <- rownames(r_no_rdms)
r_no_rdms$readmitted <- 'NO'
r_pca <- rbind(r_less_30, r_more_30, r_no_rdms)
r_no_rdms <- pca_no_rdms$pc %>% as.data.frame %>% .[,1:5]
r_no_rdms$variable <- rownames(r_no_rdms)
r_no_rdms$readmitted <- 'NO'
r_pca <- rbind(r_less_30, r_more_30, r_no_rdms)
r_less_30 <- pca_less_30$pc %>% as.data.frame %>% .[,1:5]
r_less_30$variable <- rownames(r_less_30)
r_less_30$readmitted <- '<30'
r_pca <- rbind(r_less_30, r_more_30, r_no_rdms)
View(r_pca)
names(r_pca)
r_pca %>%
ggplot(aes(x = PC1, y = PC2)) +
geom_point()
r_pca %>%
ggplot(aes(x = variable, y = PC1)) +
geom_bar(stat = "identity") +
coord_flip()
r_pca %>%
ggplot(aes(x = variable, y = PC1)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~readmitted)
r_pca %>%
ggplot(aes(x = reorder(variable, -PC1), y = PC1)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~readmitted)
r_pca %>%
ggplot(aes(x = reorder(variable, -PC2), y = PC2)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~readmitted)
r_pca %>%
ggplot(aes(x = reorder(variable, -PC3), y = PC3)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~readmitted)
plot(tbl$num_procedures, tbl$num_medications, pch = 20)
tbl_num_less_30 %>%
cor(method = 'spearman') %>%
corrplot::corrplot.mixed()
cmat_less30 <- tbl_num_less_30 %>%
cor(method = 'spearman')
cmat_more30 <- tbl_num_more_30 %>%
cor(method = 'spearman')
suppressMessages(pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrplot, ranger, fastcluster, sparklyr, fastDummies, ade4))
mantel.rtest(cmat_less30, cmat_more30, nrepet = 9999)
?mantel.rtest
suppressMessages(pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrplot, ranger, fastcluster, sparklyr, fastDummies, ape))
mantel.test(cmat_less30, cmat_more30, nperm = 999, graph = TRUE)
mantel.test(cmat_less30, cmat_more30, nperm = 999, graph = F)
cmat_less30
tbl_num_less_30$rosiglitazone_Down
tbl_num_less_30$rosiglitazone_Down %>% table()
tbl_num_less_30 %>% caret::nzv()
tbl_num_more_30 %>% caret::nzv()
tbl_num_no_rdms %>% caret::nzv()
tbl_num_less_30 <- tbl_num_less_30[,-caret::nzv(tbl_num_less_30)]
tbl_num_more_30 <- tbl_num_more_30[,-caret::nzv(tbl_num_more_30)]
tbl_num_no_rdms <- tbl_num_no_rdms[,-caret::nzv(tbl_num_no_rdms)]
length(names(tbl_num_more_30))
length(names(tbl_num_less_30))
length(names(tbl_num_no_rdms))
cmat_less30 <- tbl_num_less_30 %>%
cor(method = 'spearman')
cmat_nordsm <- tbl_num_no_rdms %>%
cor(method = 'spearman')
mantel.test(cmat_less30, cmat_nordsm, nperm = 999, graph = T)
cmat_more30 <- tbl_num_more_30 %>%
cor(method = 'spearman')
cmat_less30 <- tbl_num_less_30 %>%
dplyr::select(names(tbl_num_more_30)) %>%
cor(method = 'spearman')
dim(cmat_less30)
dim(cmat_more30)
dim(cmat_nordsm)
cmat_nordsm <- tbl_num_no_rdms %>%
dplyr::select(names(tbl_num_more_30)) %>%
cor(method = 'spearman')
dim(cmat_nordsm)
mantel.test(cmat_less30, cmat_more30, nperm = 999, graph = T)
mantel.test(cmat_less30, cmat_nordsm, nperm = 999, graph = T)
mantel.test(cmat_more30, cmat_nordsm, nperm = 999, graph = T)
cmat_less30 %>%
corrplot()
q1 <- matrix(runif(36), nrow = 6)
q2 <- matrix(runif(36), nrow = 6)
diag(q1) <- diag(q2) <- 0
mantel.test(q1, q2, graph = TRUE,
main = "Mantel test: a random example with 6 X 6 matrices
representing asymmetric relationships",
xlab = "z-statistic", ylab = "Density",
sub = "The vertical line shows the observed z-statistic")
#
?mantel.test
mantel.test(cmat_less30, cmat_more30, graph = T)
mantel.test(cmat_less30, cmat_nordsm, graph = T)
cmat_less30
cmat_less30[1:5,1:5]
cmat_more30[1:5,1:5]
cmat_nordsm[1:5,1:5]
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
suppressMessages(pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrplot, ranger, fastcluster, sparklyr, fastDummies, ape, Boruta))
## Obtain the data
if(!file.exists(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'))){
## Download data
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/00296/dataset_diabetes.zip'
download.file(url, destfile = paste0(getwd(),'/dataset_diabetes.zip'))
## Unzip files
unzip(paste0(getwd(),'/dataset_diabetes.zip'))
file.remove(paste0(getwd(),'/dataset_diabetes.zip'))
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
} else {
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
}
## Replace '?' character by NA's
tbl <- tbl %>% dplyr::na_if(y = '?')
# psych::describe(tbl)
## Data pre-processing
## Identify and remove variables without variance
zvar <- tbl %>% caret::nzv()
tbl  <- tbl[,-zvar]
## Replace the codes by the right categories to the *admision* variables
# Load ID identifiers
idi  <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/IDs_mapping.csv'), delim = ',')
mtch <- which(is.na(idi$admission_type_id))
# admision_type_id
idi1 <- idi[1:(mtch[1]-1),]
# discharge_disposition_id
idi2 <- idi[(mtch[1]+1):(mtch[2]-1),]
names(idi2) <- as.character(idi2[1,])
idi2 <- idi2[-1,]
# admission_source_id
idi3 <- idi[(mtch[2]+1):nrow(idi),]
names(idi3) <- as.character(idi3[1,])
idi3 <- idi3[-1,]
tbl$admission_type_id <- factor(tbl$admission_type_id)
levels(tbl$admission_type_id) <- idi1$description
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('NULL','Not Available')] <- NA
# Create a new category which comprises the levels: 'Newborn','Trauma Center','Not Mapped'
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('Newborn','Trauma Center','Not Mapped')] <- 'Other'
tbl$discharge_disposition_id <- factor(tbl$discharge_disposition_id)
levels(tbl$discharge_disposition_id) <- idi2$description[match(levels(tbl$discharge_disposition_id), idi2$discharge_disposition_id)]
levels(tbl$discharge_disposition_id)[levels(tbl$discharge_disposition_id) %in% c('NULL','Not Available')] <- NA
levels(tbl$discharge_disposition_id)[grep(pattern = '[dD][iI][sS][cC][hH][aA][rR][gG][eE][dD]', x = levels(tbl$discharge_disposition_id))] <- 'Discharged'
levels(tbl$discharge_disposition_id)[grep(pattern = '[eE][xX][pP][iI][rR][eE][dD]', x = levels(tbl$discharge_disposition_id))] <- 'Expired'
levels(tbl$discharge_disposition_id)[grep(pattern = '[hH][oO][sS][pP][iI][cC][eE]', x = levels(tbl$discharge_disposition_id))] <- 'Hospice'
levels(tbl$discharge_disposition_id)[c(2,3,5)] <- 'Admitted'
tbl$admission_source_id <- factor(tbl$admission_source_id)
levels(tbl$admission_source_id) <- idi3$description[match(levels(tbl$admission_source_id), idi3$admission_source_id)]
levels(tbl$admission_source_id)[levels(tbl$admission_source_id) %in% c('NULL','Not Available')] <- NA
levels(tbl$admission_source_id)[grep(pattern = '[tT][rR][aA][nN][sS][fF][eE][rR]', x = levels(tbl$admission_source_id))] <- 'Transfer'
levels(tbl$admission_source_id)[grep(pattern = '[rR][eE][fF][eE][rR][rR][aA][lL]', x = levels(tbl$admission_source_id))] <- 'Referral'
levels(tbl$admission_source_id)[4:8] <- 'Other'
rm(idi, idi1, idi2, idi3)
tbl$gender[grep(pattern = 'Unknown', x = tbl$gender)] <- NA
## Identify variables with more than 15% of missing data
msg <- tbl %>%
apply(X = ., MARGIN = 2, function(x){sum(is.na(x))/nrow(.)}) %>%
sort(decreasing = T) %>%
.[. > 0.15]
print(msg)
# Remove variables with more than 15% of missing data
tbl <- tbl[,-which(names(tbl) %in% names(msg))]
# Check the confusion matrix
# table(tbl$race, tbl$readmitted) %>%
#   base::data.frame() %>%
#   ggplot(aes(x = Var1, y = Var2, fill = Freq)) +
#   geom_tile() +
#   coord_equal() +
#   scale_fill_gradientn(name = "", colors = terrain.colors(10)) +
#   scale_x_discrete(name = "") +
#   scale_y_discrete(name = "")
# How many times the same patient visited the hospital
# Select the ones with the maximum number of days interned in the hospital
visits <- tbl$patient_nbr %>% table %>% sort(decreasing = T) %>% base::as.data.frame()
names(visits)[1] <- 'patient_nbr'
visits$patient_nbr <- visits$patient_nbr %>% as.character() %>% as.numeric()
unq_vs <- visits %>% dplyr::filter(Freq == 1)
visits <- visits %>% dplyr::filter(Freq > 1)
tbl_unq <- tbl %>% dplyr::filter(patient_nbr %in% unq_vs$patient_nbr)
tbl_unq$number_visits <- 1
tbl_dup <- 1:nrow(visits) %>%
purrr::map(.f = function(i){
df <- tbl %>%
dplyr::filter(patient_nbr == visits$patient_nbr[i]) %>%
.[which.max(.$time_in_hospital)[1],]
df$number_visits <- visits$Freq[i]
return(df)
}) %>%
dplyr::bind_rows()
tbl <- rbind(tbl_dup, tbl_unq)
rm(tbl_dup, tbl_unq, unq_vs, visits)
## Transform character to factors
tbl[sapply(tbl, is.character)] <- lapply(tbl[sapply(tbl, is.character)], as.factor)
## Create numerical age variables using the midpoint of each age interval
tbl$age_num <- tbl$age %>%
gsub('\\[', '', .) %>%
gsub('\\)', '', .) %>%
strsplit(., split = '-') %>%
purrr::map(.f = function(int){
x <- as.numeric(int)
return(mean(x))
}) %>%
unlist
# Response variable
# tbl$readmitted %in% c('<30','>30')
## Exploratory Data Analysis
summary(tbl)
tbl$encounter_id <- NULL
tbl$patient_nbr  <- NULL
# Get rid of diag_1, diag_2, and diag_3
tbl$diag_1 <- tbl$diag_2 <- tbl$diag_3 <- NULL
# Discard expired and hospiced people from analysis
tbl$discharge_disposition_id <- tbl$discharge_disposition_id %>% as.character
tbl <- tbl %>%
dplyr::filter(!(discharge_disposition_id %in% c('Expired','Hospice')))
tbl$discharge_disposition_id <- tbl$discharge_disposition_id %>% factor()
tbl_num <- tbl %>% fastDummies::dummy_cols(ignore_na = T)
names(tbl_num)
tbl_num <- tbl_num %>%
dplyr::select(time_in_hospital:number_diagnoses,
number_visits,age_num,
race_AfricanAmerican:race_Other,
gender_Female,gender_Male,
admission_type_id_Emergency:admission_type_id_Other,
discharge_disposition_id_Admitted:`discharge_disposition_id_Not Mapped`,
admission_source_id_Referral:admission_source_id_Other,
`A1Cresult_>7`:diabetesMed_Yes, readmitted)
tbl_num_full <- tbl_num %>%
tidyr::drop_na()
tbl_num_full_bin <- tbl_num_full
tbl_num_full_bin$readmitted <- ifelse(test = tbl_num_full_bin$readmitted %in% c('<30','>30'), yes = 1, no = 0)
tbl_num_full_sp <- tbl_num_full[,-ncol(tbl_num_full)]
tbl_num_less_30 <- tbl_num_full[tbl_num_full$readmitted == '<30',]
tbl_num_less_30$readmitted <- NULL
tbl_num_less_30 <- tbl_num_less_30[,-caret::nzv(tbl_num_less_30)]
tbl_num_more_30 <- tbl_num_full[tbl_num_full$readmitted == '>30',]
tbl_num_more_30$readmitted <- NULL
tbl_num_more_30 <- tbl_num_more_30[,-caret::nzv(tbl_num_more_30)]
tbl_num_no_rdms <- tbl_num_full[tbl_num_full$readmitted == 'NO',]
tbl_num_no_rdms$readmitted <- NULL
tbl_num_no_rdms <- tbl_num_no_rdms[,-caret::nzv(tbl_num_no_rdms)]
cmat_less30 <- tbl_num_less_30 %>%
dplyr::select(names(tbl_num_more_30)) %>%
cor(method = 'spearman')
cmat_more30 <- tbl_num_more_30 %>%
cor(method = 'spearman')
cmat_nordsm <- tbl_num_no_rdms %>%
dplyr::select(names(tbl_num_more_30)) %>%
cor(method = 'spearman')
mantel.test(cmat_less30, cmat_more30, nperm = 999, graph = T)
mantel.test(cmat_less30, cmat_nordsm, nperm = 999, graph = T)
mantel.test(cmat_more30, cmat_nordsm, nperm = 999, graph = T)
cmat_less30 %>%
corrplot()
set.seed(1)
seeds <- round(runif(20) * 1000, 0)
set.seed(1)
seeds <- round(runif(20) * 1000, 0)
seeds
seeds
selected_fts <- seeds %>%
purrr::map(.f = function(seed){
set.seed(seed)
smp <- sample(x = 1:nrow(tbl_num_full_bin), size = 2000, replace = F)
fts <- Boruta::Boruta(formula = readmitted ~ ., data = tbl_num_full_bin[smp,])
res <- fts$finalDecision
return(res)
})
selected_fts
selected_fts %>% as.data.frame()
selected_fts %>% as.data.frame() %>% dim()
fts <- selected_fts %>% as.data.frame() %>% dim()
fts <- selected_fts %>% as.data.frame()
View(fts)
fst$Feature <- rownames(fts)
fts <- selected_fts %>% as.data.frame()
fst$Feature <- rownames(fts)
fts$Feature <- rownames(fts)
rownames(fts) <- 1:nrow(fts)
View(fts)
colnames(fts)
colnames(fts)[1:20]
paste0('Run_',1:20)
colnames(fts)[1:20] <- paste0('Run_',1:20)
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20)
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n())
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
ggplot2::ggplot(aes(x = Feature, y = Count, fill = value)) +
ggplot2::geom_bar(stat = 'identity')
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
ggplot2::ggplot(aes(x = Feature, y = Count, fill = value)) +
ggplot2::geom_bar(stat = 'identity') +
ggplot2::coord_flip()
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
ggplot2::ggplot(aes(x = reorder(Feature, -Count), y = Count, fill = value)) +
ggplot2::geom_bar(stat = 'identity') +
ggplot2::coord_flip()
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::filter(!(value == 'Rejected' & Count == 20)) %>%
ggplot2::ggplot(aes(x = reorder(Feature, -Count), y = Count, fill = value)) +
ggplot2::geom_bar(stat = 'identity') +
ggplot2::coord_flip()
suppressMessages(pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrplot, ranger, fastcluster, sparklyr, fastDummies, ape, Boruta, future, future.apply, furrr))
?future_map
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value == max(value)) %>%
dplyr::arrange(Feature, value)
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value == max(value))
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value == which.max(value)) %>%
dplyr::arrange(Feature, value)
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value == max(value)) %>%
dplyr::arrange(Feature, value)
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n())
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value == max(Count))
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value[which.max(Count)])
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value[which.max(Count)]) %>%
dplyr::arrange(Feature, value)
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value[which.max(Count)])
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(value[which.max(Count)]) %>%
View()
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(Decision = value[which.max(Count)]) %>%
dplyr::filter(Decision %in% c('Confirmed','Tentative'))
fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(Decision = value[which.max(Count)]) %>%
dplyr::filter(Decision %in% c('Confirmed','Tentative')) %>%
dplyr::pull(Feature)
fnl_fst <- fts %>%
tidyr::pivot_longer(cols = Run_1:Run_20) %>%
dplyr::group_by(Feature, value) %>%
dplyr::summarise(Count = n()) %>%
dplyr::ungroup() %>%
dplyr::group_by(Feature) %>%
dplyr::summarise(Decision = value[which.max(Count)]) %>%
dplyr::filter(Decision %in% c('Confirmed','Tentative')) %>%
dplyr::pull(Feature)
fnl_fst
tbl_num_sel_bin <- tbl_num_full_bin[,c(fnl_fst,'readmitted')]
fnl_fst[1]
gsub('`\\','',fnl_fst[1])
gsub('\`','',fnl_fst[1])
fnl_fst[1] <- gsub('\`','',fnl_fst[1])
tbl_num_sel_bin <- tbl_num_full_bin[,c(fnl_fst,'readmitted')]
tbl_fnl_spk <- sparklyr::copy_to(sc, tbl_num_sel_bin, overwrite = T)
sc <- sparklyr::spark_connect(master = 'local')
tbl_fnl_spk <- sparklyr::copy_to(sc, tbl_num_sel_bin, overwrite = T)
partitions2 <- tbl_fnl_spk %>%
sparklyr::sdf_partition(training = 0.7, test = 0.3, seed = 1099)
# Fit a linear model to the training dataset selected features
fit2 <- partitions2$training %>%
ml_logistic_regression(readmitted ~ .)
pred2 <- ml_predict(fit2, partitions2$test)
ml_binary_classification_eval(pred2)
fit2
fit2$coefficients
fit2$coefficients %>% plot()
# Fit a linear model to the training dataset selected features
fit2 <- partitions2$training %>%
dplyr::select(-number_visits) %>%
ml_logistic_regression(readmitted ~ .)
fit2$coefficients
fit2$coefficients %>% sort(decreasing = T)
?ml_gradient_boosted_trees
# Fit a GBM model to the training dataset selected features
gbm_fit <- partitions2$training %>%
sparklyr::ml_gradient_boosted_trees(readmitted ~ .)
pred3 <- ml_predict(gbm_fit, partitions2$test)
ml_binary_classification_eval(pred3)
pred3
ml_binary_classification_evaluator(pred3)
?ml_binary_classification_eval
pred3
ml_binary_classification_eval(pred3, raw_prediction_col = 'prediction')
ml_binary_classification_eval(pred3, raw_prediction_col = "prediction")
ml_binary_classification_eval(pred3, prediction_col = "prediction")
ml_binary_classification_eval(pred3, label_col = 'readmitted', prediction_col = "prediction")
ml_binary_classification_eval(x = pred3, label_col = 'readmitted', prediction_col = "prediction")
ml_binary_classification_evaluator(x = pred3, label_col = 'readmitted', raw_prediction_col = 'prediction')
ml_binary_classification_evaluator(x = pred2, label_col = 'readmitted', raw_prediction_col = 'prediction')
gbm_fit
