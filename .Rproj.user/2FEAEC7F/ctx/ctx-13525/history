options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
pacman::p_load(tidyverse, vroom, psych, caret, corrr)
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
pacman::p_load(tidyverse, vroom, psych, caret, corrr)
if(!file.exists(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'))){
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/00296/dataset_diabetes.zip'
download.file(url, destfile = paste0(getwd(),'/dataset_diabetes.zip'))
unzip(paste0(getwd(),'/dataset_diabetes.zip'))
file.remove(paste0(getwd(),'/dataset_diabetes.zip'))
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
} else {
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
}
tbl[tbl == '?'] <- NA
zvar <- tbl %>% caret::nzv()
tbl  <- tbl[,-zvar]
# Load ID identifiers
idi  <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/IDs_mapping.csv'), delim = ',')
mtch <- which(is.na(idi$admission_type_id))
# admision_type_id
idi1 <- idi[1:(mtch[1]-1),]
# discharge_disposition_id
idi2 <- idi[(mtch[1]+1):(mtch[2]-1),]
names(idi2) <- as.character(idi2[1,])
idi2 <- idi2[-1,]
# admission_source_id
idi3 <- idi[(mtch[2]+1):nrow(idi),]
names(idi3) <- as.character(idi3[1,])
idi3 <- idi3[-1,]
tbl$admission_type_id <- factor(tbl$admission_type_id)
levels(tbl$admission_type_id) <- idi1$description
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('NULL','Not Available')] <- NA
tbl$discharge_disposition_id <- factor(tbl$discharge_disposition_id)
levels(tbl$discharge_disposition_id) <- idi2$description[match(levels(tbl$discharge_disposition_id), idi2$discharge_disposition_id)]
levels(tbl$discharge_disposition_id)[levels(tbl$discharge_disposition_id) %in% c('NULL','Not Available')] <- NA
tbl$admission_source_id <- factor(tbl$admission_source_id)
levels(tbl$admission_source_id) <- idi3$description[match(levels(tbl$admission_source_id), idi3$admission_source_id)]
levels(tbl$admission_source_id)[levels(tbl$admission_source_id) %in% c('NULL','Not Available')] <- NA
rm(idi, idi1, idi2, idi3)
# Variables with more than 15% of missing data
msg <- tbl %>%
apply(X = ., MARGIN = 2, function(x){sum(is.na(x))/nrow(.)}) %>%
sort(decreasing = T) %>%
.[. > 0.15]
tbl <- tbl[,-which(names(tbl) %in% names(msg))]
str(tbl)
# Transform character to factors
tbl[sapply(tbl, is.character)] <- lapply(tbl[sapply(tbl, is.character)], as.factor)
tbl$age <- tbl$age %>% factor(ordered = T)
tbl[sapply(tbl, is.numeric)] %>%
cor(use = 'pairwise.complete.obs', method = 'spearman') %>%
corrplot::corrplot.mixed()
colnames(tbl[sapply(tbl, is.numeric)])
tbl[sapply(tbl, is.numeric)] %>%
cor(use = 'pairwise.complete.obs', method = 'spearman')
tbl[complete.cases(tbl),] %>% dim()
abbreviate('complete')
abbreviate('complete',3)
tbl_cmp <- tbl[complete.cases(tbl),]
set.seed(1235)
inTrain <- caret::createDataPartition(y = tbl_cmp$readmitted, p = 0.7, list = FALSE)
training <- tbl_cmp[inTrain,]
testing  <- tbl_cmp[-inTrain,]
control_prmt <- caret::trainControl(method       = "LGOCV",
p               = 0.7,
number          = 10,
savePredictions = "final",
verboseIter     = TRUE,
sampling        = NULL)
control_prmt <- caret::trainControl(method       = "LGOCV",
p               = 0.7,
number          = 10,
savePredictions = "final",
verboseIter     = TRUE)
names(tbl_cmp)
ids     <- tbl_cmp[,1:2]
tbl_cmp <- tbl_cmp[,-1:2]
tbl_cmp <- tbl[complete.cases(tbl),]
ids     <- tbl_cmp[,1:2]
tbl_cmp <- tbl_cmp[,-c(1:2)]
pacman::p_load(tidyverse, vroom, psych, caret, corrr, ranger)
model_list <- caretEnsemble::caretList(
readmitted ~ .,
data       = training,
trControl  = control_prmt,
tuneList   = list(ranger = caretModelSpec(method = "ranger", importance = "impurity")),
methodList = c("svmRadial", "gbm", "cforest", "hdda", "xgbTree", "xgbLinear")
)
pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrr, ranger)
model_list <- caretEnsemble::caretList(
readmitted ~ .,
data       = training,
trControl  = control_prmt,
tuneList   = list(ranger = caretModelSpec(method = "ranger", importance = "impurity")),
methodList = c("svmRadial", "gbm", "cforest", "hdda", "xgbTree", "xgbLinear")
)
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrr, ranger)
if(!file.exists(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'))){
## Download data
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/00296/dataset_diabetes.zip'
download.file(url, destfile = paste0(getwd(),'/dataset_diabetes.zip'))
## Unzip files
unzip(paste0(getwd(),'/dataset_diabetes.zip'))
file.remove(paste0(getwd(),'/dataset_diabetes.zip'))
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
} else {
## Load the data
tbl <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/diabetic_data.csv'), delim = ',')
}
## Replace '?' character by NA's
# tbl[tbl == '?'] <- NA
tbl <- tbl %>% dplyr::na_if(y = '?')
zvar <- tbl %>% caret::nzv()
tbl  <- tbl[,-zvar]
## Replace the codes by the right categories to the *admision* variables
# Load ID identifiers
idi  <- vroom::vroom(paste0(getwd(),'/dataset_diabetes/IDs_mapping.csv'), delim = ',')
mtch <- which(is.na(idi$admission_type_id))
# admision_type_id
idi1 <- idi[1:(mtch[1]-1),]
# discharge_disposition_id
idi2 <- idi[(mtch[1]+1):(mtch[2]-1),]
names(idi2) <- as.character(idi2[1,])
idi2 <- idi2[-1,]
# admission_source_id
idi3 <- idi[(mtch[2]+1):nrow(idi),]
names(idi3) <- as.character(idi3[1,])
idi3 <- idi3[-1,]
tbl$admission_type_id <- factor(tbl$admission_type_id)
levels(tbl$admission_type_id) <- idi1$description
levels(tbl$admission_type_id)[levels(tbl$admission_type_id) %in% c('NULL','Not Available')] <- NA
tbl$discharge_disposition_id <- factor(tbl$discharge_disposition_id)
levels(tbl$discharge_disposition_id) <- idi2$description[match(levels(tbl$discharge_disposition_id), idi2$discharge_disposition_id)]
levels(tbl$discharge_disposition_id)[levels(tbl$discharge_disposition_id) %in% c('NULL','Not Available')] <- NA
tbl$admission_source_id <- factor(tbl$admission_source_id)
levels(tbl$admission_source_id) <- idi3$description[match(levels(tbl$admission_source_id), idi3$admission_source_id)]
levels(tbl$admission_source_id)[levels(tbl$admission_source_id) %in% c('NULL','Not Available')] <- NA
rm(idi, idi1, idi2, idi3)
## Identify variables with more than 15% of missing data
msg <- tbl %>%
apply(X = ., MARGIN = 2, function(x){sum(is.na(x))/nrow(.)}) %>%
sort(decreasing = T) %>%
.[. > 0.15]
print(msg)
tbl <- tbl[,-which(names(tbl) %in% names(msg))]
str(tbl)
## Transform character to factors
tbl[sapply(tbl, is.character)] <- lapply(tbl[sapply(tbl, is.character)], as.factor)
## Create numerical age variables using the midpoint of each age interval
tbl$age_num <- tbl$age %>%
gsub('\\[', '', .) %>%
gsub('\\)', '', .) %>%
strsplit(., split = '-') %>%
purrr::map(.f = function(int){
x <- as.numeric(int)
return(mean(x))
}) %>%
unlist
tbl_cmp <- tbl[complete.cases(tbl),]
ids     <- tbl_cmp[,1:2]
tbl_cmp <- tbl_cmp[,-c(1:2)]
train_control<- caret::trainControl(method = "cv",
number = 10,
savePredictions = TRUE)
library(doParallel)
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1, scipen = 999)
if(!require(pacman)){install.packages('pacman')}
suppressMessages(library(pacman))
pacman::p_load(tidyverse, vroom, psych, caret, caretEnsemble, corrr, ranger)
cl <- makePSOCKcluster(3)
registerDoParallel(cl)
model <- caret::train(readmitted ~ ., data=tbl_cmp, trControl=train_control, method = "gbm")
stopCluster(cl)
g <- gc()
rm(list = ls())
